#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../server');
const debug = require('debug')('demo:server');
const http = require('http');
const os  = require('os').networkInterfaces();

// 获取本机IP地址
function getAddress() {
    let interfaces = os;

    for (let devName in interfaces) {
        let iface = interfaces[devName];
        for (let i = 0; i < iface.length; i++) {
            let alias = iface[i];
            if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
                return alias.address;
            }
        }
    }
}

let ip = getAddress();


/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '9000');
// app.set('port', port);

/**
 * Create HTTP server.
 */



/**
 * Listen on provided port, on all network interfaces.
 */

function service(){
    let server = http.createServer(app.callback());
    let ser = server.listen(port, ip, () => {
        console.log("IP：http://%s:%s", ser.address().address, ser.address().port);
    });
    server.on('error', onError);
    server.on('listening', onListening.bind(server));
}
service()


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' 端口已被占用');
            port += 1;
            service();
            // process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = this.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
